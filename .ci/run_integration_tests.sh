#!/bin/bash

# [description]
#     Run doppel-cli integration tests. These are
#     primarily intended to test the analyze.* scripts
#     in doppel/bin. Their responsibility is to confirm
#     that the correct file content is generated by running
#     doppel-describe.
# [usage]
#     ./install_tests_packages.sh
#     ./run_integration_tests.sh $(pwd)/test_data

export TEST_DATA_DIR=${1}
export TEST_PACKAGE_NAME="testpkguno"

# failure is a natural part of life
set -e

mkdir -p ${TEST_DATA_DIR}

echo ""
echo "Running python integration tests"
echo ""

    pushd $(pwd)/integration_tests/python_tests
        pytest \
            --cache-clear
    popd

echo ""
echo "Done running python integration tests"
echo ""

echo ""
echo "Running R integration tests"
echo ""
    
    export DOPPEL_DESCRIBE_LOC=$(which doppel-describe)
    pushd $(pwd)/integration_tests/r_tests
        Rscript -e "testthat::test_dir('.')"
    popd

echo ""
echo "Done running R integration tests"
echo ""


# These tests are predicated on the fact that the APIs
# in the two packages are actually identical. Run doppel-test
# here to be sure that that's true
echo ""
echo "Checking API similarity with doppel-test"
echo ""

    doppel-test \
        --files "${TEST_DATA_DIR}/r_${TEST_PACKAGE_NAME}.json,${TEST_DATA_DIR}/python_${TEST_PACKAGE_NAME}.json" \
        --errors-allowed 0

echo ""
echo "Done checking similarity"
echo ""
